Operações aritméticas: 
mov.w 
add.w
sub.w
clr.w
dec.w
decd.w /// double decrement
inc.w
incd.w
tst.w

operações lógicas:

rla.w > (multiplica por 2) pega o valor no registrador, desloca-o de 1 bit para a esquerda, e guarda o resultado no próprio registrador.
rra.w > desloca 1 bit para a direita (divide por 2)
bis.w > OR bit-a-bit
and.w > AND bit-a-bit
bic.w > AND bit-a-bit com o inverso.
xor.w > XOR bit-a-vit
inv.w > inverte todos os bits 
cmp > compara
jeq > jump if equal
jne > jump if not equal
jmp > jump
cmp RX, RY > se RY < RX, jump.
jl
cmp RX, RY > se RY>=R7, jump.
jge

--------------------------------------------------------------------------------------------------------------------------------------

unsigned int Div_Unsigned2 (unsigned int a, unsigned int b);
{
unsigned int i;
for (i = 0; a>=b, i++)
{a= a-b;}
return i;
}


Div_Unsigned: clr R13;
For_Div: cmp R14, R15;
jl END_FOR_DIV;
sub R14, R15;
inc R13;
jmp For_Div;
END_FOR_DIV: mov R13, R15;
ret;

---------------------------------------------------------------------------

Potência

int Potencia (int X, int N);
{int sign = 0 p=1;
if (N<0)
{ N = -N;
sign = 1;}

while (N>0)
{p = Mult_Signed(X, p);
N--;
}
if (sign==1)
{return Div_Signed(1,p);
else
return p;}
}


Potencia: 
push R4;
push R5;
clr R4;
mov.w #1, R5;
comp #0, R14;
jge R14;
inc R14;
mov.w #1, R4;
WHILE_POT: cmp #1, R14;
jl WHILE_POT_END;
push R15;
push R14;
mov.w R5, R14;
call Mult_Signed;
mov.w R15, R5;
pop R14;
pop R15;
dec R14;
jmp WHILE_POT;
WHILE_POT_END: 
cmp #1 R4;
jne POT_END;
mov.w #1, R15;
mov.w R5, R14;
call Div_Signed;
pop R5;
pop R4;
ret;
POT_END: mov.w R5, R15;
pop R5;
pop R4;
ret;
---------------------------------------------------------------------------------------------------------------------------------

# fazer div_signed


sequência fibonacci

void Fibonacci (int A[], int N);
{int i; 
A[0] = 0; A[1] = 1;
for (i =2; i<N; i++)
{ A[i] = A[i-1]+A[i-2];
}
}

Fibonacci: clr 0(R15);
mov.w #1 2(R15);
mov.w #2, R13;
cmp R14, R13; ////// i>=N?
jge END_FOR_FIBO;
mov.w R13, R12; ///// R12 = A + 2(i-2) = &A[i-2]
sub #2, R12;
rla R12;
add R15, R12;
mov 0(R12), 4(R12);//////A[i]=A[i-2]
add 2(R12), 4(R12);
inc R13;
jmp FOR_FIBO;
END_FOR_FIBO:
ret;

MULT_signed:
        
        PUSH    R15
        RLA     R15                                             
        JNC     Third_else_if_MULT_signed                       
        POP     R15
        PUSH    R14
        RLA     R14                                             
        JNC     Second_else_if_MULT_signed                       
        POP     R14
        INV     R15                                          
        INC     R15                                              
        INV     R14
        INC     R14
        CALL    #MULT_unsigned
        CLR     R14
        RET          
