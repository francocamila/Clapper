Data: 05/05/2017

1. Projete o hardware necessário para o MSP430 controlar um motor DC de 12V e 4A. Utilize transistores bipolares de junção (TBJ) com Vbe = 0,7 V, beta = 100 e Vce(saturação) = 0,2 V. Além disso, considere que Vcc = 3 V para o MSP430, e que este não pode fornecer mais do que 10 mA por porta digital.

Cálculo de Ib:
Ic = beta² * Ib;
4A = 1000 * Ib;
Ib = 0,4 mA.
Cálculo de Rb:
Rb = (Vcc-2*Vbe)/Ib;
Rb = (3-1,4)/0,4*10^(-3);
Rb = 4Kohm.

2. Projete o hardware necessário para o MSP430 controlar um motor DC de 10V e 1A. Utilize transistores bipolares de junção (TBJ) com Vbe = 0,7 V e beta = 120. Além disso, considere que Vcc = 3,5 V para o MSP430, e que este não pode fornecer mais do que 10 mA por porta digital.
Calculo de Ib:
Ic = beta² * Ib;
1A = 14400 * Ib;
Ib = 69,44 uA.
Cálculo de Rb:
Rb = (Vcc - 2*Vbe)/Ib; 
Rb = (3,5 - 2*0,7)/69,44*10^(-6);
Rb = 23,041Kohm.


3. Projete o hardware utilizado para controlar 6 LEDs utilizando charlieplexing. Apresente os pinos utilizados no MSP430 e os LEDs, nomeados L1-L6.

Cada pino controla 4 leds. Vleds = 3*4=12V e a amperagem I=0,08A e Ib = 10mA, Vcc=3V, tem-se:
Ic = beta * Ib;
0,08=beta * 10*10^(-3);
beta = 8;
Cálculo de Rb:
Rb = (Vcc - *0,7)/Ib;
Rb = (3 - 0,7)/10*10^(-3))
Rb = 230ohm, para cada pino. 

4. Defina a função void main(void){} para controlar 6 LEDs de uma árvore de natal usando o hardware da questão anterior. Acenda os LEDs de forma que um ser humano veja todos acesos ao mesmo tempo.

#include <msp430.h> 
#define CH1 BIT0
#define CH2 BIT1
#define CH3 BIT2
#define CHT (CH1 + CH2 + CH3)

void charlie_on(CH_OUT, CH_ON){
    P1OUT &=~CHT;
    P1DIR &=~CHT;
    P1DIR |=CH_OUT;
    P1OUT |=CH_ON;
}

int main(void)
{
    WDTCTL = WDTPW|WDTHOLD;
    while(1){
    charlie_on(CH2+CH3, CH2);
    charlie_on(CH2+CH3, CH3);
    charlie_on(CH1+CH2, CH1);
    charlie_on(CH1+CH2, CH2);
    charlie_on(CH1+CH3, CH1);
    charlie_on(CH1+CH3, CH3);}
    return 0;
    }


5. Defina a função void main(void){} para controlar 6 LEDs de uma árvore de natal usando o hardware da questão 3. Acenda os LEDs de forma que um ser humano veja os LEDs L1 e L2 acesos juntos por um tempo, depois os LEDs L3 e L4 juntos, e depois os LEDs L5 e L6 juntos.

#include <msp430.h> 
#define CH1 BIT0
#define CH2 BIT1
#define CH3 BIT2
#define CHT (CH1 + CH2 + CH3)

void delay(volatile unsigned int i)
{
    while (i-->0);
}

void charlie_on(CH_OUT, CH_ON){
    P1OUT &=~CHT;
    P1DIR &=~CHT;
    P1DIR |=CH_OUT;
    P1OUT |=CH_ON;
}

int main(void)
{
    WDTCTL = WDTPW|WDTHOLD;
    while(1){
    charlie_on(CH2+CH3, CH2);
    charlie_on(CH2+CH3, CH3);
    delay(0xffff);
    charlie_on(CH1+CH2, CH1);
    charlie_on(CH1+CH2, CH2);
    delay (0xffff);
    charlie_on(CH1+CH3, CH1);
    charlie_on(CH1+CH3, CH3);
    delay(0xffff);}
    return 0;
    }


6. Defina a função void EscreveDigito(volatile char dig); que escreve um dos dígitos 0x0-0xF em um único display de 7 segmentos via porta P1, baseado na figura abaixo. Considere que em outra parte do código os pinos P1.0-P1.6 já foram configurados para corresponderem aos LEDs A-G, e que estes LEDs possuem resistores externos para limitar a corrente.

        ---  ==> A
       |   |
 F <== |   | ==> B
       |   |
        ---  ==> G
       |   |
 E <== |   | ==> C
       |   |
        ---  ==> D

#include <msp430.h> 
#define D0 (BIT0+BIT1+BIT2+BIT3+BIT4+BIT5)
#define D1 (BIT1+BIT2)
#define D2 (BIT0+BIT1+BIT6+BIT4+BIT3)
#define D3 (BIT0+BIT1+BIT6+BIT2+BIT3)
#define D4 (BIT5+BIT6+BIT1+BIT2)
#define D5 (BIT0+BIT5+BIT6+BIT2+BIT3)
#define D6 (BIT0+BIT5+BIT4+BIT3+BIT2+BIT6)
#define D7 (BIT0+BIT1+BIT2)
#define D8 (BIT0+BIT1+BIT2+BIT3+BIT4+BIT5+BIT6)
#define D9 (BIT0+BIT1+BIT6+BIT5+BIT3)
#define DA (BIT0+BIT1+BIT6+BIT5+BIT2+BIT4)
#define DB (BIT5+BIT4+BIT3+BIT2+BIT6)
#define DC (BIT0+BIT5+BIT4+BIT3)
#define DD (BIT1+BIT2+BIT3+BIT4+BIT6)
#define DE (BIT0+BIT5+BIT6+BIT4+BIT3)
#define DF (BIT0+BIT5+BIT6+BIT4)


void EscreveDigito(volatile char dig){
    P1OUT &=~D8;
    P1DIR &=~D8;
    P1DIR |= dig;
    P1OUT |= dig;
}

void delay(volatile int i){
    while((i--)>0);
}
int main(void)
{
    WDTCTL = WDTPW|WDTHOLD;
    while(1){
    EscreveDigito(D1);
    delay(0xffff);
    EscreveDigito(D2);
    delay(0xffff);
    EscreveDigito(D3);
    delay(0xffff);
    EscreveDigito(D4);
    delay(0xffff);
    EscreveDigito(D5);
    delay(0xffff);
    EscreveDigito(D6);
    delay(0xffff);
    EscreveDigito(D7);
    delay(0xffff);
    EscreveDigito(D8);
    delay(0xffff);
    EscreveDigito(D9);
    delay(0xffff);
    EscreveDigito(DA);
    delay(0xffff);
    EscreveDigito(DB);
    delay(0xffff);
    EscreveDigito(DC);
    delay(0xffff);
    EscreveDigito(DD);
    delay(0xffff);
    EscreveDigito(DF);
    delay(0xffff);}
    return 0;
    }


7. Multiplexe 2 displays de 7 segmentos para apresentar a seguinte sequência em loop:
	00 - 11 - 22 - 33 - 44 - 55 - 66 - 77 - 88 - 99 - AA - BB - CC - DD - EE - FF

#include <msp430.h> 
#define D0 (BIT0+BIT1+BIT2+BIT3+BIT4+BIT5)
#define D1 (BIT1+BIT2)
#define D2 (BIT0+BIT1+BIT6+BIT4+BIT3)
#define D3 (BIT0+BIT1+BIT6+BIT2+BIT3)
#define D4 (BIT5+BIT6+BIT1+BIT2)
#define D5 (BIT0+BIT5+BIT6+BIT2+BIT3)
#define D6 (BIT0+BIT5+BIT4+BIT3+BIT2+BIT6)
#define D7 (BIT0+BIT1+BIT2)
#define D8 (BIT0+BIT1+BIT2+BIT3+BIT4+BIT5+BIT6)
#define D9 (BIT0+BIT1+BIT6+BIT5+BIT3)
#define DA (BIT0+BIT1+BIT6+BIT5+BIT2+BIT4)
#define DB (BIT5+BIT4+BIT3+BIT2+BIT6)
#define DC (BIT0+BIT5+BIT4+BIT3)
#define DD (BIT1+BIT2+BIT3+BIT4+BIT6)
#define DE (BIT0+BIT5+BIT6+BIT4+BIT3)
#define DF (BIT0+BIT5+BIT6+BIT4)
#define C1 BIT7
#define C2 BIT0

void EscreveDigito(volatile char dig){
    P1OUT &=~D8;
    P1DIR &=~D8;
    P1DIR |= dig;
    P1OUT |= dig;
}

void delay(volatile int i){
    while((i--)>0);
}
int main(void)
{
    WDTCTL = WDTPW|WDTHOLD;
    P1DIR|=C1;
    P1OUT|=C1;
    P2DIR|=C2;
    P1OUT|=C2;

    while(1){
    EscreveDigito(D1);
    delay(0xffff);
    EscreveDigito(D2);
    delay(0xffff);
    EscreveDigito(D3);
    delay(0xffff);
    EscreveDigito(D4);
    delay(0xffff);
    EscreveDigito(D5);
    delay(0xffff);
    EscreveDigito(D6);
    delay(0xffff);
    EscreveDigito(D7);
    delay(0xffff);
    EscreveDigito(D8);
    delay(0xffff);
    EscreveDigito(D9);
    delay(0xffff);
    EscreveDigito(DA);
    delay(0xffff);
    EscreveDigito(DB);
    delay(0xffff);
    EscreveDigito(DC);
    delay(0xffff);
    EscreveDigito(DD);
    delay(0xffff);
    EscreveDigito(DF);
    delay(0xffff);}
    return 0;
    }









